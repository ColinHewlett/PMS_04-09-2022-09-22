/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinicpms.view.views.import_export_progress_view;

import clinicpms.controller.EntityDescriptor;
import clinicpms.view.View;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import javax.swing.JInternalFrame;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/**
 *
 * @author colin
 */
public class ImportProgressView extends View {
    enum Mode {PATIENT, APPOINTMENT, NONE};
    enum Operation {EXPORT, IMPORT};
    private boolean hasSystemGCed = false;
    /*
    private static String EXPORT_TITLE_HEADER = "Export progress";
    private static String EXPORT_APPOINTMENT_PROGRESS_HEADER = "Export appointment data to PMS";
    private static String EXPORT_PATIENT_PROGRESS_HEADER = "Export patient data to PMS";
    private static String EXPORT_START_PROCESS_HEADER = "Start export";
    */
    private static String IMPORT_TITLE_HEADER = "Import progress";
    private static String IMPORT_APPOINTMENT_PROGRESS_HEADER = "Import appointment data from CSV source";
    private static String IMPORT_PATIENT_PROGRESS_HEADER = "Import patient data from CSV source";
    private static String IMPORT_START_PROCESS_HEADER = "Start import";
    
    
    private Mode mode = Mode.NONE;
    private ActionListener myController = null;
    private EntityDescriptor entityDescriptor = null;
    private InternalFrameAdapter internalFrameAdapter = null;
    private View.Viewer myViewType = null;
    
    private void setMode(Mode value){
        mode = value;
    }
    
    private Mode getMode(){
        return mode;
    }

    private void setMyViewType(View.Viewer value){
        this.myViewType = value;
    }
    
    private ActionListener getMyController(){
         return this.myController;
     }
    private void setMyController(ActionListener value){
        this.myController = value;
    }
    
    private void setEntityDescriptor(EntityDescriptor value){
        this.entityDescriptor = value;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barPatients = new javax.swing.JProgressBar();
        lblPatientsProgressBar = new javax.swing.JLabel();
        lblAppointmentsProgressBar = new javax.swing.JLabel();
        barAppointments = new javax.swing.JProgressBar();
        btnStart = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setTitle("Exported data progress");

        barPatients.setMinimum(0);
        barPatients.setStringPainted(true);

        barPatients.setMaximum(100);

        lblPatientsProgressBar.setText("Patients");

        lblAppointmentsProgressBar.setText("Appointments");

        barAppointments.setMinimum(0);
        barAppointments.setMaximum(100);
        barAppointments.setStringPainted(true);

        btnStart.setText("Start export");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnClose.setText("Close view");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPatientsProgressBar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(barPatients, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barAppointments, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAppointmentsProgressBar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(lblPatientsProgressBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblAppointmentsProgressBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnClose))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        try{
            setClosed(true);
        }catch (PropertyVetoException ex){
            
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        
        ActionEvent actionEvent = new ActionEvent(this, 
                ActionEvent.ACTION_PERFORMED,
                EntityDescriptor.ImportExportProgressViewControllerActionEvent.IMPORT_EXPORT_START_REQUEST.toString());
        this.getMyController().actionPerformed(actionEvent);

    }//GEN-LAST:event_btnStartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barAppointments;
    private javax.swing.JProgressBar barPatients;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel lblAppointmentsProgressBar;
    private javax.swing.JLabel lblPatientsProgressBar;
    // End of variables declaration//GEN-END:variables

    
    
    private void centreViewOnDesktop(Container desktopView, JInternalFrame view){
        Insets insets = desktopView.getInsets();
        Dimension deskTopViewDimension = desktopView.getSize();
        Dimension myViewDimension = view.getSize();
        view.setLocation(new Point(
                (int)(deskTopViewDimension.getWidth() - (myViewDimension.getWidth()))/2,
                (int)((deskTopViewDimension.getHeight()-insets.top) - myViewDimension.getHeight())/2));
    }
    /**
     * Creates new form MigrationManagerModelViewer
     */
    public ImportProgressView(View.Viewer myViewType,ActionListener myController,
            EntityDescriptor entityDescriptor) {
        setMyViewType(myViewType);
        setEntityDescriptor(entityDescriptor);
        setMyController(myController);
        initComponents();
 
        this.initialiseView();

    }
    
    @Override
    public void addInternalFrameClosingListener(){
        /**
         * Establish an InternalFrameListener for when the view is closed 
         */
        
        internalFrameAdapter = new InternalFrameAdapter(){
            @Override  
            public void internalFrameClosing(InternalFrameEvent e) {
                ActionEvent actionEvent = new ActionEvent(
                        ImportProgressView.this,ActionEvent.ACTION_PERFORMED,
                        EntityDescriptor.ImportExportProgressViewControllerActionEvent.IMPORT_EXPORT_PROGRESS_CLOSE_NOTIFICATION.toString());
                getMyController().actionPerformed(actionEvent);
            }
        };
        this.addInternalFrameListener(internalFrameAdapter);
    }

    @Override
    public void initialiseView(){
        
        this.setVisible(true);
        lblPatientsProgressBar.setText(ImportProgressView.IMPORT_PATIENT_PROGRESS_HEADER);
        lblAppointmentsProgressBar.setText(ImportProgressView.IMPORT_APPOINTMENT_PROGRESS_HEADER);
        btnStart.setText(ImportProgressView.IMPORT_START_PROCESS_HEADER);
        this.setTitle(ImportProgressView.IMPORT_TITLE_HEADER);
    }
    
    @Override 
    public EntityDescriptor getEntityDescriptor(){
        return entityDescriptor;   
    }
    
    @Override
    public View.Viewer getMyViewType(){
        return this.myViewType;
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent e){
        ActionEvent actionEvent = null;
        EntityDescriptor.ImportExportProgressViewControllerPropertyChangeEvent propertyName =
                EntityDescriptor.ImportExportProgressViewControllerPropertyChangeEvent.valueOf(e.getPropertyName());
        
        switch (propertyName){
            case progress:{
                int progress = (Integer) e.getNewValue();
                if ((progress > 65)&&!hasSystemGCed){
                    System.gc();
                    hasSystemGCed = true;
                }
                switch (getMode()){
                    case PATIENT:
                        barPatients.setIndeterminate(false);
                        barPatients.setValue(progress);
                        break;
                    case APPOINTMENT:
                        barAppointments.setIndeterminate(false);
                        barAppointments.setValue(progress);
                        break;
                }
                break;
            }
            case OPERATION_COMPLETED:
                btnStart.setEnabled(true);
                setMode(Mode.NONE);
                break;
                
            case PREPARE_FOR_RECEIPT_OF_APPOINTMENT_PROGRESS:
                barAppointments.setIndeterminate(true);
                setMode(Mode.APPOINTMENT);
                actionEvent = new ActionEvent(
                        ImportProgressView.this,ActionEvent.ACTION_PERFORMED,
                        EntityDescriptor.ImportExportProgressViewControllerActionEvent.READY_FOR_RECEIPT_OF_APPOINTMENT_PROGRESS.toString());
                getMyController().actionPerformed(actionEvent);
                break;
                
            case PREPARE_FOR_RECEIPT_OF_PATIENT_PROGRESS:
                barPatients.setIndeterminate(true);
                barAppointments.setValue(0);
                setMode(Mode.PATIENT);
                actionEvent = new ActionEvent(
                        ImportProgressView.this,ActionEvent.ACTION_PERFORMED,
                        EntityDescriptor.ImportExportProgressViewControllerActionEvent.READY_FOR_RECEIPT_OF_PATIENT_PROGRESS.toString());
                getMyController().actionPerformed(actionEvent);
                break;
        }


    }

}
